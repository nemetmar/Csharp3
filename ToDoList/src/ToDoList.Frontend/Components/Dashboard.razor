@using ToDoList.Frontend.Clients
@using ToDoList.Frontend.Views
@inject IToDoItemsClient ToDoItemsClient
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<h1>Dashboard</h1>



<table class="table table-hover mt-3">
    <thead class="table-dark">
        <tr>
            <th @onclick="SortItemsById">Id <span class="sort-arrows">&#9650; &#9660;</span></th>
            <th @onclick="SortItemsByName">Name <span class="sort-arrows">&#9650; &#9660;</span></th>
            <th @onclick="SortItemsByIsCompleted">Is completed <span class="sort-arrows">&#9650; &#9660;</span></th>
            <th>Description</th>
            <th>Category</th>
            <th>Actions</th>
        </tr>
    </thead>

    @if(toDoItems is null)
    {
        <p>Načítám.....</p>
    }

    @if(toDoItems is not null)
    {
        @foreach(var toDoItem in toDoItems)
        {
            <tbody>
                <tr class=@GetRowClass(toDoItem)>
                    <td>@toDoItem.ToDoItemId</td>
                    <td>@toDoItem.Name</td>
                    <td>@(toDoItem.IsCompleted ? "Yes" : "No")</td>
                    <td>@toDoItem.Description</td>
                    <td>@toDoItem.Category</td>
                    <td>
                        <i class="bi bi-pencil-fill" style = "color:#0d6efd;" @onclick="() => EditItem(toDoItem)"></i>
                        <i class="bi bi-trash3-fill" style = "color:#0d6efd;" @onclick="() => DeleteItem(toDoItem)"></i>
                        <input class="form-check-input" type="checkbox" @bind="toDoItem.IsCompleted" @onclick="() => EditIsCompleted(toDoItem)">
                    </td>
                </tr>
            </tbody>
        }
    }

</table>


@code
{
    protected override async Task OnInitializedAsync()
    {
        toDoItems = await ToDoItemsClient.ReadItemsAsync();
    }
    private List<ToDoItemView>? toDoItems;


     private string sortOrderId = "desc";
     private string sortOrderName = "desc";
     private string sortOrderIsCompleted = "desc";

    private void SortItemsByName()
    {
        sortOrderName = sortOrderName == "asc" ? "desc" : "asc";
        SortItems(i => i.Name, sortOrderName);
    }
    private void SortItemsById()
    {
        sortOrderId = sortOrderId == "asc" ? "desc" : "asc";
        SortItems(i => i.ToDoItemId, sortOrderId);
    }


    private void SortItemsByIsCompleted()
    {
         sortOrderIsCompleted = sortOrderIsCompleted == "asc" ? "desc" : "asc";
         SortItems(i => i.IsCompleted, sortOrderIsCompleted);
    }

    private void SortItems<TKey>(Func<ToDoItemView, TKey> keySelector, string sortOrder)
    {
        if (sortOrder == "asc")
        {
            toDoItems = toDoItems?.OrderBy(keySelector).ToList();
        }
        else
        {
            toDoItems = toDoItems?.OrderByDescending(keySelector).ToList();
        }
    }

    public string GetRowClass(ToDoItemView toDoItemView)
    {
        return toDoItemView.IsCompleted ? "table-success" : "table-secondary";
    }

    public void EditItem(ToDoItemView toDoItemView)
    {
        NavigationManager.NavigateTo($"editToDoItem/{toDoItemView.ToDoItemId}");
    }

    public async void DeleteItem(ToDoItemView toDoItemView)
    {
        await ToDoItemsClient.DeleteItemAsync(toDoItemView);
        NavigationManager.Refresh(true);
    }


    public async void EditIsCompleted(ToDoItemView toDoItemView)
    {
        toDoItemView.IsCompleted = toDoItemView.IsCompleted == true ? false : true;
        await ToDoItemsClient.UpdateItemAsync(toDoItemView);
        NavigationManager.Refresh(true);
    }
}
